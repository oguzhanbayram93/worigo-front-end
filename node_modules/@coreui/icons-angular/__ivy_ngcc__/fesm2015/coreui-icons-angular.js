import { __decorate, __param } from 'tslib';
import { ɵɵdefineInjectable, Injectable, Input, Component, Renderer2, ElementRef, Directive, NgModule, Optional, SkipSelf } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import classNames from 'classnames';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
import * as ɵngcc2 from '@angular/common';

function IconComponent_img_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "img", 3);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("cHtmlAttr", ctx_r0.attributes)("src", ctx_r0.src, ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵattribute("alt", ctx_r0.title);
} }
function IconComponent__svg_svg_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("innerHtml", ctx_r1.iconCode, ɵngcc0.ɵɵsanitizeHtml)("cHtmlAttr", ctx_r1.attributes);
    ɵngcc0.ɵɵattribute("width", ctx_r1.width)("height", ctx_r1.height || ctx_r1.width)("viewBox", ctx_r1.viewBox)("class", ctx_r1.computedClasses);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.titleCode, "\n");
} }
function IconComponent__svg_svg_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 5);
    ɵngcc0.ɵɵelement(1, "use");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("cHtmlAttr", ctx_r2.attributes);
    ɵngcc0.ɵɵattribute("width", ctx_r2.width)("height", ctx_r2.height || ctx_r2.width)("class", ctx_r2.computedClasses);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("href", ctx_r2.use);
} }
let IconSetService = class IconSetService {
    constructor() {
        // tslint:disable-next-line:variable-name
        this._icons = {};
    }
    set icons(iconSet) {
        this._icons = iconSet;
    }
    get icons() {
        return this._icons;
    }
    getIcon(name) {
        const icon = this.icons[name];
        if (!icon) {
            console.warn(`CoreUI WARN: Icon ${name} is not registered in IconService`);
        }
        return this.icons[name];
    }
};
IconSetService.ɵfac = function IconSetService_Factory(t) { return new (t || IconSetService)(); };
IconSetService.ɵprov = ɵɵdefineInjectable({ factory: function IconSetService_Factory() { return new IconSetService(); }, token: IconSetService, providedIn: "root" });

let IconComponent = class IconComponent {
    constructor(sanitizer, iconSet) {
        this.sanitizer = sanitizer;
        this.iconSet = iconSet;
        this.attributes = { role: 'img' };
        this.size = '';
        this.use = '';
    }
    set name(name) {
        this._name = name;
    }
    get name() {
        const nameIsKebabCase = this._name && this._name.includes('-');
        return nameIsKebabCase ? this.toCamelCase(this._name) : this._name;
    }
    set viewBox(viewBox) {
        this._viewBox = viewBox;
    }
    get viewBox() {
        return this._viewBox || `0 0 ${this.scale}`;
    }
    get titleCode() {
        return this.title ? `<title>${this.title}</title>` : '';
    }
    get code() {
        if (this.content) {
            return this.content;
        }
        else if (this.iconSet) {
            return this.iconSet.getIcon(this.name);
        }
        console.warn(`c-icon component: icon name '${this.name}' does not exist for IconSet service. ` +
            `To use icon by 'name' prop you need to add it to IconSet service. \n`, this.name);
        return undefined;
    }
    get iconCode() {
        const code = Array.isArray(this.code) ? this.code[1] || this.code[0] : this.code;
        return this.sanitizer.bypassSecurityTrustHtml(this.titleCode + code);
    }
    get scale() {
        return Array.isArray(this.code) && this.code.length > 1 ? this.code[0] : '64 64';
    }
    get computedSize() {
        const addCustom = !this.size && (this.width || this.height);
        return this.size === 'custom' || addCustom ? 'custom-size' : this.size;
    }
    get computedClasses() {
        const classes = classNames(this.customClasses, {
            'c-icon': true,
            [`c-icon-${this.computedSize}`]: !!this.computedSize
        });
        return classes;
    }
    toCamelCase(str) {
        return str.replace(/([-_][a-z0-9])/ig, ($1) => {
            return $1.toUpperCase().replace('-', '');
        });
    }
};
IconComponent.ɵfac = function IconComponent_Factory(t) { return new (t || IconComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(IconSetService)); };
IconComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: IconComponent, selectors: [["c-icon"]], inputs: { attributes: "attributes", size: "size", use: "use", name: "name", viewBox: "viewBox", content: "content", src: "src", title: "title", customClasses: "customClasses", width: "width", height: "height" }, decls: 3, vars: 3, consts: [[3, "cHtmlAttr", "src", 4, "ngIf"], ["xmlns", "http://www.w3.org/2000/svg", "role", "img", "pointer-events", "none", 3, "innerHtml", "cHtmlAttr", 4, "ngIf"], ["xmlns", "http://www.w3.org/2000/svg", "role", "img", "pointer-events", "none", 3, "cHtmlAttr", 4, "ngIf"], [3, "cHtmlAttr", "src"], ["xmlns", "http://www.w3.org/2000/svg", "role", "img", "pointer-events", "none", 3, "innerHtml", "cHtmlAttr"], ["xmlns", "http://www.w3.org/2000/svg", "role", "img", "pointer-events", "none", 3, "cHtmlAttr"]], template: function IconComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, IconComponent_img_0_Template, 1, 3, "img", 0);
        ɵngcc0.ɵɵtemplate(1, IconComponent__svg_svg_1_Template, 2, 7, "svg", 1);
        ɵngcc0.ɵɵtemplate(2, IconComponent__svg_svg_2_Template, 2, 5, "svg", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.src);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.src && !ctx.use);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.use);
    } }, directives: function () { return [ɵngcc2.NgIf, HtmlAttributesDirective]; }, styles: [".c-icon[_ngcontent-%COMP%]{display:inline-block;color:inherit;text-align:center;fill:currentColor}.c-icon[_ngcontent-%COMP%]:not(.c-icon-c-s):not(.c-icon-custom-size){width:1rem;height:1rem;font-size:1rem}.c-icon[_ngcontent-%COMP%]:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-2xl{width:2rem;height:2rem;font-size:2rem}.c-icon[_ngcontent-%COMP%]:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-3xl{width:3rem;height:3rem;font-size:3rem}.c-icon[_ngcontent-%COMP%]:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-4xl{width:4rem;height:4rem;font-size:4rem}.c-icon[_ngcontent-%COMP%]:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-5xl{width:5rem;height:5rem;font-size:5rem}.c-icon[_ngcontent-%COMP%]:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-6xl{width:6rem;height:6rem;font-size:6rem}.c-icon[_ngcontent-%COMP%]:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-7xl{width:7rem;height:7rem;font-size:7rem}.c-icon[_ngcontent-%COMP%]:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-8xl{width:8rem;height:8rem;font-size:8rem}.c-icon[_ngcontent-%COMP%]:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-9xl{width:9rem;height:9rem;font-size:9rem}.c-icon[_ngcontent-%COMP%]:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-xl{width:1.5rem;height:1.5rem;font-size:1.5rem}.c-icon[_ngcontent-%COMP%]:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-lg{width:1.25rem;height:1.25rem;font-size:1.25rem}.c-icon[_ngcontent-%COMP%]:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-sm{width:.875rem;height:.875rem;font-size:.875rem}.c-icon-c-s[_ngcontent-%COMP%], .c-icon-custom-size[_ngcontent-%COMP%]{width:initial!important;height:initial!important}"] });
IconComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: IconSetService }
];
__decorate([
    Input()
], IconComponent.prototype, "attributes", void 0);
__decorate([
    Input()
], IconComponent.prototype, "name", null);
__decorate([
    Input()
], IconComponent.prototype, "content", void 0);
__decorate([
    Input()
], IconComponent.prototype, "size", void 0);
__decorate([
    Input()
], IconComponent.prototype, "src", void 0);
__decorate([
    Input()
], IconComponent.prototype, "title", void 0);
__decorate([
    Input()
], IconComponent.prototype, "use", void 0);
__decorate([
    Input()
], IconComponent.prototype, "customClasses", void 0);
__decorate([
    Input()
], IconComponent.prototype, "viewBox", null);
__decorate([
    Input()
], IconComponent.prototype, "width", void 0);
__decorate([
    Input()
], IconComponent.prototype, "height", void 0);

let HtmlAttributesDirective = class HtmlAttributesDirective {
    constructor(renderer, el) {
        this.renderer = renderer;
        this.el = el;
    }
    ngOnInit() {
        const attribs = this.cHtmlAttr;
        for (const attr in attribs) {
            if (attr === 'style' && typeof (attribs[attr]) === 'object') {
                this.setStyle(attribs[attr]);
            }
            else if (attr === 'class') {
                this.addClass(attribs[attr]);
            }
            else {
                this.setAttrib(attr, attribs[attr]);
            }
        }
    }
    setStyle(styles) {
        // tslint:disable-next-line:forin
        for (const style in styles) {
            this.renderer.setStyle(this.el.nativeElement, style, styles[style]);
        }
    }
    addClass(classes) {
        const classArray = (Array.isArray(classes) ? classes : classes.split(' '));
        classArray.filter((element) => element.length > 0).forEach(element => {
            this.renderer.addClass(this.el.nativeElement, element);
        });
    }
    setAttrib(key, value) {
        value !== null ?
            this.renderer.setAttribute(this.el.nativeElement, key, value) :
            this.renderer.removeAttribute(this.el.nativeElement, key);
    }
};
HtmlAttributesDirective.ɵfac = function HtmlAttributesDirective_Factory(t) { return new (t || HtmlAttributesDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
HtmlAttributesDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: HtmlAttributesDirective, selectors: [["", "cHtmlAttr", ""]], inputs: { cHtmlAttr: "cHtmlAttr" }, exportAs: ["cHtmlAttr"] });
HtmlAttributesDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
__decorate([
    Input()
], HtmlAttributesDirective.prototype, "cHtmlAttr", void 0);

let IconModule = class IconModule {
};
IconModule.ɵfac = function IconModule_Factory(t) { return new (t || IconModule)(); };
IconModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: IconModule });
IconModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
        ]] });

var IconSetModule_1;
let IconSetModule = IconSetModule_1 = class IconSetModule {
    constructor(parentModule) {
        if (parentModule) {
            throw new Error('CoreUI IconSetModule is already loaded. Import it in the AppModule only');
        }
    }
    static forRoot() {
        return {
            ngModule: IconSetModule_1,
            providers: [
                { provide: IconSetService }
            ]
        };
    }
};
IconSetModule.ɵfac = function IconSetModule_Factory(t) { return new (t || IconSetModule)(ɵngcc0.ɵɵinject(IconSetModule, 12)); };
IconSetModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: IconSetModule });
IconSetModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        IconSetService
    ], imports: [[
            CommonModule,
        ]] });
IconSetModule.ctorParameters = () => [
    { type: IconSetModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
IconSetModule = IconSetModule_1 = __decorate([ __param(0, Optional()), __param(0, SkipSelf())
], IconSetModule);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IconSetService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IconComponent, [{
        type: Component,
        args: [{
                selector: 'c-icon',
                template: "<img *ngIf=\"src\"\r\n     [cHtmlAttr]=\"attributes\"\r\n     [attr.alt]=\"title\"\r\n     [src]=\"src\"\r\n/>\r\n<svg  *ngIf=\"(!src) && (!use)\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      [attr.width]=\"width\"\r\n      [attr.height]=\"height || width\"\r\n      [attr.viewBox]=\"viewBox\"\r\n      [innerHtml]=\"iconCode\"\r\n      [attr.class]=\"computedClasses\"\r\n      [cHtmlAttr]=\"attributes\"\r\n      role=\"img\"\r\n      pointer-events=\"none\"\r\n>\r\n  {{titleCode}}\r\n</svg>\r\n<svg *ngIf=\"use\"\r\n     xmlns=\"http://www.w3.org/2000/svg\"\r\n     [attr.width]=\"width\"\r\n     [attr.height]=\"height || width\"\r\n     [attr.class]=\"computedClasses\"\r\n     [cHtmlAttr]=\"attributes\"\r\n     role=\"img\"\r\n     pointer-events=\"none\"\r\n>\r\n  <use [attr.href]=\"use\"></use>\r\n</svg>\r\n",
                styles: [".c-icon{display:inline-block;color:inherit;text-align:center;fill:currentColor}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size){width:1rem;height:1rem;font-size:1rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-2xl{width:2rem;height:2rem;font-size:2rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-3xl{width:3rem;height:3rem;font-size:3rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-4xl{width:4rem;height:4rem;font-size:4rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-5xl{width:5rem;height:5rem;font-size:5rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-6xl{width:6rem;height:6rem;font-size:6rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-7xl{width:7rem;height:7rem;font-size:7rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-8xl{width:8rem;height:8rem;font-size:8rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-9xl{width:9rem;height:9rem;font-size:9rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-xl{width:1.5rem;height:1.5rem;font-size:1.5rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-lg{width:1.25rem;height:1.25rem;font-size:1.25rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-sm{width:.875rem;height:.875rem;font-size:.875rem}.c-icon-c-s,.c-icon-custom-size{width:initial!important;height:initial!important}"]
            }]
    }], function () { return [{ type: ɵngcc1.DomSanitizer }, { type: IconSetService }]; }, { attributes: [{
            type: Input
        }], size: [{
            type: Input
        }], use: [{
            type: Input
        }], name: [{
            type: Input
        }], viewBox: [{
            type: Input
        }], content: [{
            type: Input
        }], src: [{
            type: Input
        }], title: [{
            type: Input
        }], customClasses: [{
            type: Input
        }], width: [{
            type: Input
        }], height: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HtmlAttributesDirective, [{
        type: Directive,
        args: [{
                selector: '[cHtmlAttr]',
                exportAs: 'cHtmlAttr'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { cHtmlAttr: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IconModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    IconComponent,
                    HtmlAttributesDirective
                ],
                imports: [
                    CommonModule,
                ],
                exports: [
                    IconComponent,
                    HtmlAttributesDirective
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IconModule, { declarations: function () { return [IconComponent, HtmlAttributesDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [IconComponent, HtmlAttributesDirective]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IconSetModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                ],
                providers: [
                    IconSetService
                ]
            }]
    }], function () { return [{ type: IconSetModule, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IconSetModule, { imports: function () { return [CommonModule]; } }); })();

/*
 * Public API Surface of @coreui/icons-angular
 */

/**
 * Generated bundle index. Do not edit.
 */

export { IconComponent, IconModule, IconSetModule, IconSetService, HtmlAttributesDirective as ɵa };

//# sourceMappingURL=coreui-icons-angular.js.map