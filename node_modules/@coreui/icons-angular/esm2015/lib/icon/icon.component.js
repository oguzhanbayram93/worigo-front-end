import { __decorate } from "tslib";
import { Component, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { IconSetService } from '../icon-set/icon-set.service';
import classNames from 'classnames';
let IconComponent = class IconComponent {
    constructor(sanitizer, iconSet) {
        this.sanitizer = sanitizer;
        this.iconSet = iconSet;
        this.attributes = { role: 'img' };
        this.size = '';
        this.use = '';
    }
    set name(name) {
        this._name = name;
    }
    get name() {
        const nameIsKebabCase = this._name && this._name.includes('-');
        return nameIsKebabCase ? this.toCamelCase(this._name) : this._name;
    }
    set viewBox(viewBox) {
        this._viewBox = viewBox;
    }
    get viewBox() {
        return this._viewBox || `0 0 ${this.scale}`;
    }
    get titleCode() {
        return this.title ? `<title>${this.title}</title>` : '';
    }
    get code() {
        if (this.content) {
            return this.content;
        }
        else if (this.iconSet) {
            return this.iconSet.getIcon(this.name);
        }
        console.warn(`c-icon component: icon name '${this.name}' does not exist for IconSet service. ` +
            `To use icon by 'name' prop you need to add it to IconSet service. \n`, this.name);
        return undefined;
    }
    get iconCode() {
        const code = Array.isArray(this.code) ? this.code[1] || this.code[0] : this.code;
        return this.sanitizer.bypassSecurityTrustHtml(this.titleCode + code);
    }
    get scale() {
        return Array.isArray(this.code) && this.code.length > 1 ? this.code[0] : '64 64';
    }
    get computedSize() {
        const addCustom = !this.size && (this.width || this.height);
        return this.size === 'custom' || addCustom ? 'custom-size' : this.size;
    }
    get computedClasses() {
        const classes = classNames(this.customClasses, {
            'c-icon': true,
            [`c-icon-${this.computedSize}`]: !!this.computedSize
        });
        return classes;
    }
    toCamelCase(str) {
        return str.replace(/([-_][a-z0-9])/ig, ($1) => {
            return $1.toUpperCase().replace('-', '');
        });
    }
};
IconComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: IconSetService }
];
__decorate([
    Input()
], IconComponent.prototype, "attributes", void 0);
__decorate([
    Input()
], IconComponent.prototype, "name", null);
__decorate([
    Input()
], IconComponent.prototype, "content", void 0);
__decorate([
    Input()
], IconComponent.prototype, "size", void 0);
__decorate([
    Input()
], IconComponent.prototype, "src", void 0);
__decorate([
    Input()
], IconComponent.prototype, "title", void 0);
__decorate([
    Input()
], IconComponent.prototype, "use", void 0);
__decorate([
    Input()
], IconComponent.prototype, "customClasses", void 0);
__decorate([
    Input()
], IconComponent.prototype, "viewBox", null);
__decorate([
    Input()
], IconComponent.prototype, "width", void 0);
__decorate([
    Input()
], IconComponent.prototype, "height", void 0);
IconComponent = __decorate([
    Component({
        selector: 'c-icon',
        template: "<img *ngIf=\"src\"\r\n     [cHtmlAttr]=\"attributes\"\r\n     [attr.alt]=\"title\"\r\n     [src]=\"src\"\r\n/>\r\n<svg  *ngIf=\"(!src) && (!use)\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      [attr.width]=\"width\"\r\n      [attr.height]=\"height || width\"\r\n      [attr.viewBox]=\"viewBox\"\r\n      [innerHtml]=\"iconCode\"\r\n      [attr.class]=\"computedClasses\"\r\n      [cHtmlAttr]=\"attributes\"\r\n      role=\"img\"\r\n      pointer-events=\"none\"\r\n>\r\n  {{titleCode}}\r\n</svg>\r\n<svg *ngIf=\"use\"\r\n     xmlns=\"http://www.w3.org/2000/svg\"\r\n     [attr.width]=\"width\"\r\n     [attr.height]=\"height || width\"\r\n     [attr.class]=\"computedClasses\"\r\n     [cHtmlAttr]=\"attributes\"\r\n     role=\"img\"\r\n     pointer-events=\"none\"\r\n>\r\n  <use [attr.href]=\"use\"></use>\r\n</svg>\r\n",
        styles: [".c-icon{display:inline-block;color:inherit;text-align:center;fill:currentColor}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size){width:1rem;height:1rem;font-size:1rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-2xl{width:2rem;height:2rem;font-size:2rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-3xl{width:3rem;height:3rem;font-size:3rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-4xl{width:4rem;height:4rem;font-size:4rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-5xl{width:5rem;height:5rem;font-size:5rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-6xl{width:6rem;height:6rem;font-size:6rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-7xl{width:7rem;height:7rem;font-size:7rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-8xl{width:8rem;height:8rem;font-size:8rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-9xl{width:9rem;height:9rem;font-size:9rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-xl{width:1.5rem;height:1.5rem;font-size:1.5rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-lg{width:1.25rem;height:1.25rem;font-size:1.25rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-sm{width:.875rem;height:.875rem;font-size:.875rem}.c-icon-c-s,.c-icon-custom-size{width:initial!important;height:initial!important}"]
    })
], IconComponent);
export { IconComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY29yZXVpL2ljb25zLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvaWNvbi9pY29uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDL0MsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUM1RCxPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7QUFPcEMsSUFBYSxhQUFhLEdBQTFCLE1BQWEsYUFBYTtJQXdFeEIsWUFDVSxTQUF1QixFQUN2QixPQUF1QjtRQUR2QixjQUFTLEdBQVQsU0FBUyxDQUFjO1FBQ3ZCLFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBbkV4QixlQUFVLEdBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFDLENBQUM7UUFVakMsU0FBSSxHQUF1SCxFQUFFLENBQUM7UUFHOUgsUUFBRyxHQUFHLEVBQUUsQ0FBQztJQXVEZCxDQUFDO0lBbEVMLElBQUksSUFBSSxDQUFDLElBQVk7UUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQztJQUNELElBQUksSUFBSTtRQUNOLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0QsT0FBTyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3JFLENBQUM7SUFRRCxJQUFJLE9BQU8sQ0FBQyxPQUFlO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO0lBQzFCLENB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LEtBQUssRUFBRTswQ0FBVTtBQUNUO0lBQVIsS0FBSyxFQUFFO29EQUF1QjtBQUUvQjtJQURDLEtBQUssRUFBRTs0Q0FHUDtBQUlRO0lBQVIsS0FBSyxFQUFFOzRDQUFPO0FBQ047SUFBUixLQUFLLEVBQUU7NkNBQVE7QUE5QkwsYUFBYTtJQUx6QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsUUFBUTtRQUNsQix5MEJBQW9DOztLQUVyQyxDQUFDO0dBQ1csYUFBYSxDQWtGekI7U0FsRlksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7RG9tU2FuaXRpemVyfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHtJY29uU2V0U2VydmljZX0gZnJvbSAnLi4vaWNvbi1zZXQvaWNvbi1zZXQuc2VydmljZSc7XHJcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdjLWljb24nLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9pY29uLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9pY29uLmNvbXBvbmVudC5zY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIEljb25Db21wb25lbnQge1xyXG5cclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxyXG4gIHByaXZhdGUgX25hbWU6IHN0cmluZztcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxyXG4gIHByaXZhdGUgX3ZpZXdCb3g6IHN0cmluZztcclxuXHJcbiAgQElucHV0KCkgYXR0cmlidXRlczogYW55ID0geyByb2xlOiAnaW1nJ307XHJcbiAgQElucHV0KClcclxuICBzZXQgbmFtZShuYW1lOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuX25hbWUgPSBuYW1lO1xyXG4gIH1cclxuICBnZXQgbmFtZSgpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgbmFtZUlzS2ViYWJDYXNlID0gdGhpcy5fbmFtZSAmJiB0aGlzLl9uYW1lLmluY2x1ZGVzKCctJyk7XHJcbiAgICByZXR1cm4gbmFtZUlzS2ViYWJDYXNlID8gdGhpcy50b0NhbWVsQ2FzZSh0aGlzLl9uYW1lKSA6IHRoaXMuX25hbWU7XHJcbiAgfVxyXG4gIEBJbnB1dCgpIGNvbnRlbnQ6IHN0cmluZyB8IHN0cmluZ1tdO1xyXG4gIEBJbnB1dCgpIHNpemU6ICdjdXN0b20nIHwgJ2N1c3RvbS1zaXplJyB8ICdzbScgfCAnbGcnIHwgJ3hsJyB8ICcyeGwnIHwgJzN4bCcgfCAnNHhsJyB8ICc1eGwnIHwgJzZ4bCcgfCAnN3hsJyB8ICc4eGwnIHwgJzl4bCcgfCAnJyA9ICcnO1xyXG4gIEBJbnB1dCgpIHNyYzogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgdXNlID0gJyc7XHJcbiAgQElucHV0KCkgY3VzdG9tQ2xhc3Nlczogc3RyaW5nO1xyXG4gIEBJbnB1dCgpXHJcbiAgc2V0IHZpZXdCb3godmlld0JveDogc3RyaW5nKSB7XHJcbiAgICB0aGlzLl92aWV3Qm94ID0gdmlld0JveDtcclxuICB9XHJcbiAgZ2V0IHZpZXdCb3goKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl92aWV3Qm94IHx8IGAwIDAgJHsgdGhpcy5zY2FsZSB9YDtcclxuICB9XHJcbiAgQElucHV0KCkgd2lkdGg7XHJcbiAgQElucHV0KCkgaGVpZ2h0O1xyXG5cclxuICBnZXQgdGl0bGVDb2RlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudGl0bGUgPyBgPHRpdGxlPiR7dGhpcy50aXRsZX08L3RpdGxlPmAgOiAnJztcclxuICB9XHJcblxyXG4gIGdldCBjb2RlKCkge1xyXG4gICAgaWYgKHRoaXMuY29udGVudCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5jb250ZW50O1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmljb25TZXQpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuaWNvblNldC5nZXRJY29uKHRoaXMubmFtZSk7XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLndhcm4oYGMtaWNvbiBjb21wb25lbnQ6IGljb24gbmFtZSAnJHt0aGlzLm5hbWV9JyBkb2VzIG5vdCBleGlzdCBmb3IgSWNvblNldCBzZXJ2aWNlLiBgICtcclxuICAgICAgYFRvIHVzZSBpY29uIGJ5ICduYW1lJyBwcm9wIHlvdSBuZWVkIHRvIGFkZCBpdCB0byBJY29uU2V0IHNlcnZpY2UuIFxcbmAsXHJcbiAgICAgIHRoaXMubmFtZVxyXG4gICAgKTtcclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgfVxyXG4gIGdldCBpY29uQ29kZSgpIHtcclxuICAgIGNvbnN0IGNvZGUgPSBBcnJheS5pc0FycmF5KHRoaXMuY29kZSkgPyB0aGlzLmNvZGVbMV0gfHwgdGhpcy5jb2RlWzBdIDogdGhpcy5jb2RlO1xyXG4gICAgcmV0dXJuIHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKHRoaXMudGl0bGVDb2RlICsgY29kZSk7XHJcbiAgfVxyXG5cclxuICBnZXQgc2NhbGUoKSB7XHJcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0aGlzLmNvZGUpICYmIHRoaXMuY29kZS5sZW5ndGggPiAxID8gdGhpcy5jb2RlWzBdIDogJzY0IDY0JztcclxuICB9XHJcblxyXG4gIGdldCBjb21wdXRlZFNpemUoKSB7XHJcbiAgICBjb25zdCBhZGRDdXN0b20gPSAhdGhpcy5zaXplICYmICh0aGlzLndpZHRoIHx8IHRoaXMuaGVpZ2h0KTtcclxuICAgIHJldHVybiB0aGlzLnNpemUgPT09ICdjdXN0b20nIHx8IGFkZEN1c3RvbSA/ICdjdXN0b20tc2l6ZScgOiB0aGlzLnNpemU7XHJcbiAgfVxyXG4gIGdldCBjb21wdXRlZENsYXNzZXMoKSB7XHJcbiAgICBjb25zdCBjbGFzc2VzID0gY2xhc3NOYW1lcyhcclxuICAgICAgdGhpcy5jdXN0b21DbGFzc2VzLFxyXG4gICAgICB7XHJcbiAgICAgICAgJ2MtaWNvbic6IHRydWUsXHJcbiAgICAgICAgW2BjLWljb24tJHt0aGlzLmNvbXB1dGVkU2l6ZX1gXTogISF0aGlzLmNvbXB1dGVkU2l6ZVxyXG4gICAgICB9LFxyXG4gICAgKTtcclxuICAgIHJldHVybiBjbGFzc2VzO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHNhbml0aXplcjogRG9tU2FuaXRpemVyLFxyXG4gICAgcHJpdmF0ZSBpY29uU2V0OiBJY29uU2V0U2VydmljZVxyXG4gICkgeyB9XHJcblxyXG4gIHRvQ2FtZWxDYXNlKHN0cikge1xyXG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy1fXVthLXowLTldKS9pZywgKCQxKSA9PiB7XHJcbiAgICAgIHJldHVybiAkMS50b1VwcGVyQ2FzZSgpLnJlcGxhY2UoJy0nLCAnJyk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19