import { __decorate } from "tslib";
import { Component, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { IconSetService } from '../icon-set/icon-set.service';
import classNames from 'classnames';
var IconComponent = /** @class */ (function () {
    function IconComponent(sanitizer, iconSet) {
        this.sanitizer = sanitizer;
        this.iconSet = iconSet;
        this.attributes = { role: 'img' };
        this.size = '';
        this.use = '';
    }
    Object.defineProperty(IconComponent.prototype, "name", {
        get: function () {
            var nameIsKebabCase = this._name && this._name.includes('-');
            return nameIsKebabCase ? this.toCamelCase(this._name) : this._name;
        },
        set: function (name) {
            this._name = name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconComponent.prototype, "viewBox", {
        get: function () {
            return this._viewBox || "0 0 " + this.scale;
        },
        set: function (viewBox) {
            this._viewBox = viewBox;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconComponent.prototype, "titleCode", {
        get: function () {
            return this.title ? "<title>" + this.title + "</title>" : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconComponent.prototype, "code", {
        get: function () {
            if (this.content) {
                return this.content;
            }
            else if (this.iconSet) {
                return this.iconSet.getIcon(this.name);
            }
            console.warn("c-icon component: icon name '" + this.name + "' does not exist for IconSet service. " +
                "To use icon by 'name' prop you need to add it to IconSet service. \n", this.name);
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconComponent.prototype, "iconCode", {
        get: function () {
            var code = Array.isArray(this.code) ? this.code[1] || this.code[0] : this.code;
            return this.sanitizer.bypassSecurityTrustHtml(this.titleCode + code);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconComponent.prototype, "scale", {
        get: function () {
            return Array.isArray(this.code) && this.code.length > 1 ? this.code[0] : '64 64';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconComponent.prototype, "computedSize", {
        get: function () {
            var addCustom = !this.size && (this.width || this.height);
            return this.size === 'custom' || addCustom ? 'custom-size' : this.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconComponent.prototype, "computedClasses", {
        get: function () {
            var _a;
            var classes = classNames(this.customClasses, (_a = {
                    'c-icon': true
                },
                _a["c-icon-" + this.computedSize] = !!this.computedSize,
                _a));
            return classes;
        },
        enumerable: true,
        configurable: true
    });
    IconComponent.prototype.toCamelCase = function (str) {
        return str.replace(/([-_][a-z0-9])/ig, function ($1) {
            return $1.toUpperCase().replace('-', '');
        });
    };
    IconComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: IconSetService }
    ]; };
    __decorate([
        Input()
    ], IconComponent.prototype, "attributes", void 0);
    __decorate([
        Input()
    ], IconComponent.prototype, "name", null);
    __decorate([
        Input()
    ], IconComponent.prototype, "content", void 0);
    __decorate([
        Input()
    ], IconComponent.prototype, "size", void 0);
    __decorate([
        Input()
    ], IconComponent.prototype, "src", void 0);
    __decorate([
        Input()
    ], IconComponent.prototype, "title", void 0);
    __decorate([
        Input()
    ], IconComponent.prototype, "use", void 0);
    __decorate([
        Input()
    ], IconComponent.prototype, "customClasses", void 0);
    __decorate([
        Input()
    ], IconComponent.prototype, "viewBox", null);
    __decorate([
        Input()
    ], IconComponent.prototype, "width", void 0);
    __decorate([
        Input()
    ], IconComponent.prototype, "height", void 0);
    IconComponent = __decorate([
        Component({
            selector: 'c-icon',
            template: "<img *ngIf=\"src\"\r\n     [cHtmlAttr]=\"attributes\"\r\n     [attr.alt]=\"title\"\r\n     [src]=\"src\"\r\n/>\r\n<svg  *ngIf=\"(!src) && (!use)\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      [attr.width]=\"width\"\r\n      [attr.height]=\"height || width\"\r\n      [attr.viewBox]=\"viewBox\"\r\n      [innerHtml]=\"iconCode\"\r\n      [attr.class]=\"computedClasses\"\r\n      [cHtmlAttr]=\"attributes\"\r\n      role=\"img\"\r\n      pointer-events=\"none\"\r\n>\r\n  {{titleCode}}\r\n</svg>\r\n<svg *ngIf=\"use\"\r\n     xmlns=\"http://www.w3.org/2000/svg\"\r\n     [attr.width]=\"width\"\r\n     [attr.height]=\"height || width\"\r\n     [attr.class]=\"computedClasses\"\r\n     [cHtmlAttr]=\"attributes\"\r\n     role=\"img\"\r\n     pointer-events=\"none\"\r\n>\r\n  <use [attr.href]=\"use\"></use>\r\n</svg>\r\n",
            styles: [".c-icon{display:inline-block;color:inherit;text-align:center;fill:currentColor}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size){width:1rem;height:1rem;font-size:1rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-2xl{width:2rem;height:2rem;font-size:2rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-3xl{width:3rem;height:3rem;font-size:3rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-4xl{width:4rem;height:4rem;font-size:4rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-5xl{width:5rem;height:5rem;font-size:5rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-6xl{width:6rem;height:6rem;font-size:6rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-7xl{width:7rem;height:7rem;font-size:7rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-8xl{width:8rem;height:8rem;font-size:8rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-9xl{width:9rem;height:9rem;font-size:9rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-xl{width:1.5rem;height:1.5rem;font-size:1.5rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-lg{width:1.25rem;height:1.25rem;font-size:1.25rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-sm{width:.875rem;height:.875rem;font-size:.875rem}.c-icon-c-s,.c-icon-custom-size{width:initial!important;height:initial!important}"]
        })
    ], IconComponent);
    return IconComponent;
}());
export { IconComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY29yZXVpL2ljb25zLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvaWNvbi9pY29uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDL0MsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUM1RCxPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7QUFPcEM7SUF3RUUsdUJBQ1UsU0FBdUIsRUFDdkIsT0FBdUI7UUFEdkIsY0FBUyxHQUFULFNBQVMsQ0FBYztRQUN2QixZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQW5FeEIsZUFBVSxHQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBQyxDQUFDO1FBVWpDLFNBQUksR0FBdUgsRUFBRSxDQUFDO1FBRzlILFFBQUcsR0FBRyxFQUFFLENBQUM7SUF1RGQsQ0FBQztJQWxFTCxzQkFBSSwrQkFBSTthQUdSO1lBQ0UsSUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMvRCxPQUFPLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDckUsQ0FBQzthQU5ELFVBQVMsSUFBWTtZQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNwQixDQUFDOzs7T0FBQTtJQVlELHNCQUFJLGtDQUFPO2FBR1g7WUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLElBQUksU0FBUSxJQUFJLENBQUMsS0FBUSxDQUFDO1FBQ2hELENBQUM7YUFM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QUFhO0lBQ1o7UUFBUixLQUFLLEVBQUU7Z0RBQWU7SUFDZDtRQUFSLEtBQUssRUFBRTs4Q0FBVTtJQUNUO1FBQVIsS0FBSyxFQUFFO3dEQUF1QjtJQUUvQjtRQURDLEtBQUssRUFBRTtnREFHUDtJQUlRO1FBQVIsS0FBSyxFQUFFO2dEQUFPO0lBQ047UUFBUixLQUFLLEVBQUU7aURBQVE7SUE5QkwsYUFBYTtRQUx6QixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsUUFBUTtZQUNsQix5MEJBQW9DOztTQUVyQyxDQUFDO09BQ1csYUFBYSxDQWtGekI7SUFBRCxvQkFBQztDQUFBLEFBbEZELElBa0ZDO1NBbEZZLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0RvbVNhbml0aXplcn0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7SWNvblNldFNlcnZpY2V9IGZyb20gJy4uL2ljb24tc2V0L2ljb24tc2V0LnNlcnZpY2UnO1xyXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYy1pY29uJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vaWNvbi5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vaWNvbi5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJY29uQ29tcG9uZW50IHtcclxuXHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcclxuICBwcml2YXRlIF9uYW1lOiBzdHJpbmc7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcclxuICBwcml2YXRlIF92aWV3Qm94OiBzdHJpbmc7XHJcblxyXG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXM6IGFueSA9IHsgcm9sZTogJ2ltZyd9O1xyXG4gIEBJbnB1dCgpXHJcbiAgc2V0IG5hbWUobmFtZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLl9uYW1lID0gbmFtZTtcclxuICB9XHJcbiAgZ2V0IG5hbWUoKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IG5hbWVJc0tlYmFiQ2FzZSA9IHRoaXMuX25hbWUgJiYgdGhpcy5fbmFtZS5pbmNsdWRlcygnLScpO1xyXG4gICAgcmV0dXJuIG5hbWVJc0tlYmFiQ2FzZSA/IHRoaXMudG9DYW1lbENhc2UodGhpcy5fbmFtZSkgOiB0aGlzLl9uYW1lO1xyXG4gIH1cclxuICBASW5wdXQoKSBjb250ZW50OiBzdHJpbmcgfCBzdHJpbmdbXTtcclxuICBASW5wdXQoKSBzaXplOiAnY3VzdG9tJyB8ICdjdXN0b20tc2l6ZScgfCAnc20nIHwgJ2xnJyB8ICd4bCcgfCAnMnhsJyB8ICczeGwnIHwgJzR4bCcgfCAnNXhsJyB8ICc2eGwnIHwgJzd4bCcgfCAnOHhsJyB8ICc5eGwnIHwgJycgPSAnJztcclxuICBASW5wdXQoKSBzcmM6IHN0cmluZztcclxuICBASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIHVzZSA9ICcnO1xyXG4gIEBJbnB1dCgpIGN1c3RvbUNsYXNzZXM6IHN0cmluZztcclxuICBASW5wdXQoKVxyXG4gIHNldCB2aWV3Qm94KHZpZXdCb3g6IHN0cmluZykge1xyXG4gICAgdGhpcy5fdmlld0JveCA9IHZpZXdCb3g7XHJcbiAgfVxyXG4gIGdldCB2aWV3Qm94KCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fdmlld0JveCB8fCBgMCAwICR7IHRoaXMuc2NhbGUgfWA7XHJcbiAgfVxyXG4gIEBJbnB1dCgpIHdpZHRoO1xyXG4gIEBJbnB1dCgpIGhlaWdodDtcclxuXHJcbiAgZ2V0IHRpdGxlQ29kZSgpIHtcclxuICAgIHJldHVybiB0aGlzLnRpdGxlID8gYDx0aXRsZT4ke3RoaXMudGl0bGV9PC90aXRsZT5gIDogJyc7XHJcbiAgfVxyXG5cclxuICBnZXQgY29kZSgpIHtcclxuICAgIGlmICh0aGlzLmNvbnRlbnQpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY29udGVudDtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5pY29uU2V0KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmljb25TZXQuZ2V0SWNvbih0aGlzLm5hbWUpO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS53YXJuKGBjLWljb24gY29tcG9uZW50OiBpY29uIG5hbWUgJyR7dGhpcy5uYW1lfScgZG9lcyBub3QgZXhpc3QgZm9yIEljb25TZXQgc2VydmljZS4gYCArXHJcbiAgICAgIGBUbyB1c2UgaWNvbiBieSAnbmFtZScgcHJvcCB5b3UgbmVlZCB0byBhZGQgaXQgdG8gSWNvblNldCBzZXJ2aWNlLiBcXG5gLFxyXG4gICAgICB0aGlzLm5hbWVcclxuICAgICk7XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gIH1cclxuICBnZXQgaWNvbkNvZGUoKSB7XHJcbiAgICBjb25zdCBjb2RlID0gQXJyYXkuaXNBcnJheSh0aGlzLmNvZGUpID8gdGhpcy5jb2RlWzFdIHx8IHRoaXMuY29kZVswXSA6IHRoaXMuY29kZTtcclxuICAgIHJldHVybiB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbCh0aGlzLnRpdGxlQ29kZSArIGNvZGUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHNjYWxlKCkge1xyXG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodGhpcy5jb2RlKSAmJiB0aGlzLmNvZGUubGVuZ3RoID4gMSA/IHRoaXMuY29kZVswXSA6ICc2NCA2NCc7XHJcbiAgfVxyXG5cclxuICBnZXQgY29tcHV0ZWRTaXplKCkge1xyXG4gICAgY29uc3QgYWRkQ3VzdG9tID0gIXRoaXMuc2l6ZSAmJiAodGhpcy53aWR0aCB8fCB0aGlzLmhlaWdodCk7XHJcbiAgICByZXR1cm4gdGhpcy5zaXplID09PSAnY3VzdG9tJyB8fCBhZGRDdXN0b20gPyAnY3VzdG9tLXNpemUnIDogdGhpcy5zaXplO1xyXG4gIH1cclxuICBnZXQgY29tcHV0ZWRDbGFzc2VzKCkge1xyXG4gICAgY29uc3QgY2xhc3NlcyA9IGNsYXNzTmFtZXMoXHJcbiAgICAgIHRoaXMuY3VzdG9tQ2xhc3NlcyxcclxuICAgICAge1xyXG4gICAgICAgICdjLWljb24nOiB0cnVlLFxyXG4gICAgICAgIFtgYy1pY29uLSR7dGhpcy5jb21wdXRlZFNpemV9YF06ICEhdGhpcy5jb21wdXRlZFNpemVcclxuICAgICAgfSxcclxuICAgICk7XHJcbiAgICByZXR1cm4gY2xhc3NlcztcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcixcclxuICAgIHByaXZhdGUgaWNvblNldDogSWNvblNldFNlcnZpY2VcclxuICApIHsgfVxyXG5cclxuICB0b0NhbWVsQ2FzZShzdHIpIHtcclxuICAgIHJldHVybiBzdHIucmVwbGFjZSgvKFstX11bYS16MC05XSkvaWcsICgkMSkgPT4ge1xyXG4gICAgICByZXR1cm4gJDEudG9VcHBlckNhc2UoKS5yZXBsYWNlKCctJywgJycpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==