import { __decorate, __param } from 'tslib';
import { ɵɵdefineInjectable, Injectable, Input, Component, Renderer2, ElementRef, Directive, NgModule, Optional, SkipSelf } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import classNames from 'classnames';
import { CommonModule } from '@angular/common';

var IconSetService = /** @class */ (function () {
    function IconSetService() {
        // tslint:disable-next-line:variable-name
        this._icons = {};
    }
    Object.defineProperty(IconSetService.prototype, "icons", {
        get: function () {
            return this._icons;
        },
        set: function (iconSet) {
            this._icons = iconSet;
        },
        enumerable: true,
        configurable: true
    });
    IconSetService.prototype.getIcon = function (name) {
        var icon = this.icons[name];
        if (!icon) {
            console.warn("CoreUI WARN: Icon " + name + " is not registered in IconService");
        }
        return this.icons[name];
    };
    IconSetService.ɵprov = ɵɵdefineInjectable({ factory: function IconSetService_Factory() { return new IconSetService(); }, token: IconSetService, providedIn: "root" });
    IconSetService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], IconSetService);
    return IconSetService;
}());

var IconComponent = /** @class */ (function () {
    function IconComponent(sanitizer, iconSet) {
        this.sanitizer = sanitizer;
        this.iconSet = iconSet;
        this.attributes = { role: 'img' };
        this.size = '';
        this.use = '';
    }
    Object.defineProperty(IconComponent.prototype, "name", {
        get: function () {
            var nameIsKebabCase = this._name && this._name.includes('-');
            return nameIsKebabCase ? this.toCamelCase(this._name) : this._name;
        },
        set: function (name) {
            this._name = name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconComponent.prototype, "viewBox", {
        get: function () {
            return this._viewBox || "0 0 " + this.scale;
        },
        set: function (viewBox) {
            this._viewBox = viewBox;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconComponent.prototype, "titleCode", {
        get: function () {
            return this.title ? "<title>" + this.title + "</title>" : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconComponent.prototype, "code", {
        get: function () {
            if (this.content) {
                return this.content;
            }
            else if (this.iconSet) {
                return this.iconSet.getIcon(this.name);
            }
            console.warn("c-icon component: icon name '" + this.name + "' does not exist for IconSet service. " +
                "To use icon by 'name' prop you need to add it to IconSet service. \n", this.name);
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconComponent.prototype, "iconCode", {
        get: function () {
            var code = Array.isArray(this.code) ? this.code[1] || this.code[0] : this.code;
            return this.sanitizer.bypassSecurityTrustHtml(this.titleCode + code);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconComponent.prototype, "scale", {
        get: function () {
            return Array.isArray(this.code) && this.code.length > 1 ? this.code[0] : '64 64';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconComponent.prototype, "computedSize", {
        get: function () {
            var addCustom = !this.size && (this.width || this.height);
            return this.size === 'custom' || addCustom ? 'custom-size' : this.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconComponent.prototype, "computedClasses", {
        get: function () {
            var _a;
            var classes = classNames(this.customClasses, (_a = {
                    'c-icon': true
                },
                _a["c-icon-" + this.computedSize] = !!this.computedSize,
                _a));
            return classes;
        },
        enumerable: true,
        configurable: true
    });
    IconComponent.prototype.toCamelCase = function (str) {
        return str.replace(/([-_][a-z0-9])/ig, function ($1) {
            return $1.toUpperCase().replace('-', '');
        });
    };
    IconComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: IconSetService }
    ]; };
    __decorate([
        Input()
    ], IconComponent.prototype, "attributes", void 0);
    __decorate([
        Input()
    ], IconComponent.prototype, "name", null);
    __decorate([
        Input()
    ], IconComponent.prototype, "content", void 0);
    __decorate([
        Input()
    ], IconComponent.prototype, "size", void 0);
    __decorate([
        Input()
    ], IconComponent.prototype, "src", void 0);
    __decorate([
        Input()
    ], IconComponent.prototype, "title", void 0);
    __decorate([
        Input()
    ], IconComponent.prototype, "use", void 0);
    __decorate([
        Input()
    ], IconComponent.prototype, "customClasses", void 0);
    __decorate([
        Input()
    ], IconComponent.prototype, "viewBox", null);
    __decorate([
        Input()
    ], IconComponent.prototype, "width", void 0);
    __decorate([
        Input()
    ], IconComponent.prototype, "height", void 0);
    IconComponent = __decorate([
        Component({
            selector: 'c-icon',
            template: "<img *ngIf=\"src\"\r\n     [cHtmlAttr]=\"attributes\"\r\n     [attr.alt]=\"title\"\r\n     [src]=\"src\"\r\n/>\r\n<svg  *ngIf=\"(!src) && (!use)\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      [attr.width]=\"width\"\r\n      [attr.height]=\"height || width\"\r\n      [attr.viewBox]=\"viewBox\"\r\n      [innerHtml]=\"iconCode\"\r\n      [attr.class]=\"computedClasses\"\r\n      [cHtmlAttr]=\"attributes\"\r\n      role=\"img\"\r\n      pointer-events=\"none\"\r\n>\r\n  {{titleCode}}\r\n</svg>\r\n<svg *ngIf=\"use\"\r\n     xmlns=\"http://www.w3.org/2000/svg\"\r\n     [attr.width]=\"width\"\r\n     [attr.height]=\"height || width\"\r\n     [attr.class]=\"computedClasses\"\r\n     [cHtmlAttr]=\"attributes\"\r\n     role=\"img\"\r\n     pointer-events=\"none\"\r\n>\r\n  <use [attr.href]=\"use\"></use>\r\n</svg>\r\n",
            styles: [".c-icon{display:inline-block;color:inherit;text-align:center;fill:currentColor}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size){width:1rem;height:1rem;font-size:1rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-2xl{width:2rem;height:2rem;font-size:2rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-3xl{width:3rem;height:3rem;font-size:3rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-4xl{width:4rem;height:4rem;font-size:4rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-5xl{width:5rem;height:5rem;font-size:5rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-6xl{width:6rem;height:6rem;font-size:6rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-7xl{width:7rem;height:7rem;font-size:7rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-8xl{width:8rem;height:8rem;font-size:8rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-9xl{width:9rem;height:9rem;font-size:9rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-xl{width:1.5rem;height:1.5rem;font-size:1.5rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-lg{width:1.25rem;height:1.25rem;font-size:1.25rem}.c-icon:not(.c-icon-c-s):not(.c-icon-custom-size).c-icon-sm{width:.875rem;height:.875rem;font-size:.875rem}.c-icon-c-s,.c-icon-custom-size{width:initial!important;height:initial!important}"]
        })
    ], IconComponent);
    return IconComponent;
}());

var HtmlAttributesDirective = /** @class */ (function () {
    function HtmlAttributesDirective(renderer, el) {
        this.renderer = renderer;
        this.el = el;
    }
    HtmlAttributesDirective.prototype.ngOnInit = function () {
        var attribs = this.cHtmlAttr;
        for (var attr in attribs) {
            if (attr === 'style' && typeof (attribs[attr]) === 'object') {
                this.setStyle(attribs[attr]);
            }
            else if (attr === 'class') {
                this.addClass(attribs[attr]);
            }
            else {
                this.setAttrib(attr, attribs[attr]);
            }
        }
    };
    HtmlAttributesDirective.prototype.setStyle = function (styles) {
        // tslint:disable-next-line:forin
        for (var style in styles) {
            this.renderer.setStyle(this.el.nativeElement, style, styles[style]);
        }
    };
    HtmlAttributesDirective.prototype.addClass = function (classes) {
        var _this = this;
        var classArray = (Array.isArray(classes) ? classes : classes.split(' '));
        classArray.filter(function (element) { return element.length > 0; }).forEach(function (element) {
            _this.renderer.addClass(_this.el.nativeElement, element);
        });
    };
    HtmlAttributesDirective.prototype.setAttrib = function (key, value) {
        value !== null ?
            this.renderer.setAttribute(this.el.nativeElement, key, value) :
            this.renderer.removeAttribute(this.el.nativeElement, key);
    };
    HtmlAttributesDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], HtmlAttributesDirective.prototype, "cHtmlAttr", void 0);
    HtmlAttributesDirective = __decorate([
        Directive({
            selector: '[cHtmlAttr]',
            exportAs: 'cHtmlAttr'
        })
    ], HtmlAttributesDirective);
    return HtmlAttributesDirective;
}());

var IconModule = /** @class */ (function () {
    function IconModule() {
    }
    IconModule = __decorate([
        NgModule({
            declarations: [
                IconComponent,
                HtmlAttributesDirective
            ],
            imports: [
                CommonModule,
            ],
            exports: [
                IconComponent,
                HtmlAttributesDirective
            ],
        })
    ], IconModule);
    return IconModule;
}());

var IconSetModule = /** @class */ (function () {
    function IconSetModule(parentModule) {
        if (parentModule) {
            throw new Error('CoreUI IconSetModule is already loaded. Import it in the AppModule only');
        }
    }
    IconSetModule_1 = IconSetModule;
    IconSetModule.forRoot = function () {
        return {
            ngModule: IconSetModule_1,
            providers: [
                { provide: IconSetService }
            ]
        };
    };
    var IconSetModule_1;
    IconSetModule.ctorParameters = function () { return [
        { type: IconSetModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    IconSetModule = IconSetModule_1 = __decorate([
        NgModule({
            imports: [
                CommonModule,
            ],
            providers: [
                IconSetService
            ]
        }),
        __param(0, Optional()), __param(0, SkipSelf())
    ], IconSetModule);
    return IconSetModule;
}());

/*
 * Public API Surface of @coreui/icons-angular
 */

/**
 * Generated bundle index. Do not edit.
 */

export { IconComponent, IconModule, IconSetModule, IconSetService, HtmlAttributesDirective as ɵa };
//# sourceMappingURL=coreui-icons-angular.js.map
